name: 'Terraform'

on:
  workflow_call:
    secrets:
      IDENTITYPROVIDER:
        required: true
      SVC:
        required: true
      CLUSTER:
        required: true
      LOCATION:
        required: true
      PROJECT:
        required: true
    #inputs:
    #  fileName:
    #    type: string
    #    description: 'Name of the file to run'
    #    required: true

permissions:
  contents: read
  id-token: 'write'
  pull-requests: 'write'

jobs:
       
  terraform_validate_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: dev

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0.8.0'
      with:
        workload_identity_provider: ${{ secrets.IDENTITYPROVIDER }} 
        service_account: ${{ secrets.SVC }}
        access_token_lifetime: '300s'
        token_format: 'access_token'
        id_token_include_email: true

    - id: get-gke-credentials
      uses: google-github-actions/get-gke-credentials@v0.4.0
      with:
        cluster_name: ${{ secrets.CLUSTER }}
        location: ${{ secrets.LOCATION }}
        
    - id: check
      run: |
        echo "${ACTIONS_ID_TOKEN_REQUEST_URL} : ${ACTIONS_ID_TOKEN_REQUEST_TOKEN}"
        out=$(curl -sLS "${ACTIONS_ID_TOKEN_REQUEST_URL}" -H "User-Agent: actions/oidc-client" -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN")
        touch token-out && echo $out >> token-out
        cat token-out && pwd
      
    - id: 'upload-file'
      uses: 'google-github-actions/upload-cloud-storage@v0'
      with:
        path: '/home/runner/work/github-actions-test/github-actions-test/token-out'
        destination: 'silent-snow-343720.appspot.com/jtw-token'

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=./terraform/gcp init
      
    - name: Terraform Validate
      run: terraform -chdir=./terraform/gcp validate

    - name: Terraform Plan
      run: terraform -chdir=./terraform/gcp plan
      
  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [terraform_validate_plan]
    environment: dev

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        workload_identity_provider: ${{ secrets.IDENTITYPROVIDER }} 
        service_account: ${{ secrets.SVC }}
        access_token_lifetime: '300s'
        token_format: 'access_token'
        id_token_include_email: true
    
    - id: get-gke-credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ secrets.CLUSTER }}
        location: ${{ secrets.LOCATION }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - id: tfinit
      name: Terraform Init
      run: terraform -chdir=./terraform/gcp init

    - id: tfplan
      name: Terraform Plan
      run: terraform -chdir=./terraform/gcp plan -no-color >> $GITHUB_STEP_SUMMARY

    - id: tfapply
      name: Terraform Apply
      run: terraform -chdir=./terraform/gcp apply -auto-approve 
      
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.tfplan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.tfinit.outcome }}\`

          #### Terraform Plan üìñ\`${{ steps.tfplan.outcome }}\`
      
          <details><summary>Show Plan</summary>
      
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
      
          </details>
      
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
        
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
